global_test = {
	every_ruler = {
		limit = {
			is_independent_ruler = no
			is_landed = yes
			has_government = feudal_government
			highest_held_title_tier >= tier_county
		}
		start_feudal_contract_negotiation = { VASSAL = THIS }
	}
}

global_wipe = {
	every_ruler = {
		limit = { owns_story_of_type = feudal_contract_negotiation }
		every_owned_story = {
			limit = { story_type = feudal_contract_negotiation }
			end_story = yes
		}
	}
}

ongoing_negotiations = {
	every_ruler = {
		limit = { owns_story_of_type = feudal_contract_negotiation }
		debug_log = "[Scope.Char.GetNameNoTooltip] [Scope.Char.GetLiege.GetNameNoTooltip]"
	}
}

test = { 
	start_feudal_contract_negotiation = { VASSAL = THIS }
}

start_feudal_contract_negotiation = {
	$VASSAL$ = { save_scope_as = vassal }
	scope:vassal = {
		if = {
			limit = { PREV = scope:vassal }
			set_variable = {
				name = initiator
				value = scope:vassal
			}
		}
		else = {
			set_variable = {
				name = initiator
				value = scope:vassal.liege
			}
		}
	}
	scope:vassal = {
		create_story = {
			type = feudal_contract_negotiation
			save_temporary_scope_as = contract_negotiation
		}
	}
}


set_obligation_level_desire = {
	debug_log = "set_obligation_level_desire"
	if = {
		limit = {
			obligation_$OBLIGATION$_$LEVEL$_can_be_negotiated = yes
			NOT = { vassal_contract_obligation_level:$OBLIGATION$ = $LEVEL$ }
			OR = {
				AND = {
					$OBLIGATION$_$LEVEL$_ruler_desire > 0
					$OBLIGATION$_$LEVEL$_ruler_desire > $OBLIGATION$_$LEVEL$_vassal_refusal
				}
				AND = {
					$OBLIGATION$_$LEVEL$_vassal_desire > 0
					$OBLIGATION$_$LEVEL$_vassal_desire > $OBLIGATION$_$LEVEL$_ruler_refusal
				}
			}
		}
		set_variable = {
			name = obligation
			value = flag:$OBLIGATION$
		}
		set_variable = {
			name = level
			value = $LEVEL$
		}
		set_variable = {
			name = ruler_desire
			value = $OBLIGATION$_$LEVEL$_ruler_desire
		}
		set_variable = {
			name = ruler_refusal
			value = $OBLIGATION$_$LEVEL$_ruler_refusal
		}
		set_variable = {
			name = vassal_desire
			value = $OBLIGATION$_$LEVEL$_vassal_desire
		}
		set_variable = {
			name = vassal_refusal
			value = $OBLIGATION$_$LEVEL$_vassal_refusal
		}
		create_story = {
			type = obligation_level_desire
			save_temporary_scope_as = negotiable_obligation_level
		}
		scope:story = {
			add_to_variable_list = {
				name = negotiable_obligations
				target = scope:negotiable_obligation_level
			}
		}
	}
}

move_negotiation_along = {
	ordered_in_list = {
		variable = negotiable_obligations
		limit = {
			var:$SENDER$_desire > 0
			var:$RECEIVER$_refusal > 0
			var:$RECEIVER$_refusal = { compare_value < scope:story.var:$RECEIVER$_max_balance }
		}
		order_by = var:$SENDER$_desire
		save_scope_as = negotiated_obligation_level
	}
	scope:negotiated_obligation_level = {
		debug_log = "[Scope.Var('obligation').GetFlagName] [Scope.Var('level').GetValue]"
	}
	add_to_variable_list = {
		name = negotiated_obligations
		target = scope:negotiated_obligation_level
	}
	remove_list_variable = {
		name = negotiable_obligations
		target = scope:negotiated_obligation_level
	}
	ordered_in_list = {
		variable = negotiable_obligations
		limit = { var:obligation = scope:negotiated_obligation_level.var:obligation }
		order_by = var:$SENDER$_desire
		PREV = {
			change_variable = {
				name = $SENDER$_max_acceptance
				subtract = PREV.var:$SENDER$_desire
			}
		}
	}

	ordered_in_list = {
		variable = negotiable_obligations
		limit = { var:obligation = scope:negotiated_obligation_level.var:obligation }
		order_by = var:$RECEIVER$_desire
		PREV = {
			change_variable = {
				name = $RECEIVER$_max_acceptance
				subtract = PREV.var:$RECEIVER$_desire
			}
		}
	}

	every_in_list = {
		variable = negotiable_obligations
		limit = { var:obligation = scope:negotiated_obligation_level.var:obligation }
		scope:story = {
			remove_list_variable = {
				name = negotiable_obligations
				target = PREV
			}
		}
	}

	change_variable = {
		name = $SENDER$_acceptance
		add = scope:negotiated_obligation_level.var:$SENDER$_desire
	}
	change_variable = {
		name = $RECEIVER$_acceptance
		subtract = scope:negotiated_obligation_level.var:$RECEIVER$_refusal
	}

	set_variable = {
		name = $SENDER$_max_balance
		value = {
			add = var:$SENDER$_acceptance
			add = var:$SENDER$_max_acceptance
		}
	}
	set_variable = {
		name = $RECEIVER$_max_balance
		value = {
			add = var:$RECEIVER$_acceptance
			add = var:$RECEIVER$_max_acceptance
		}
	}
}

negotiations_end_positive = {
	var:vassal = { add_gold = 1000 }
	var:ruler = { add_gold = 1000 }
	every_in_list = {
		variable = negotiated_obligations
		save_temporary_scope_as = obligation_set
		story_owner = {
			switch = {
				trigger = scope:obligation_set.var:obligation
				flag:feudal_government_taxes = { vassal_contract_set_obligation_level = { type = feudal_government_taxes level = scope:obligation_set.var:level }}
				flag:feudal_government_levies = { vassal_contract_set_obligation_level = { type = feudal_government_levies level = scope:obligation_set.var:level }}
				flag:special_contract = { vassal_contract_set_obligation_level = { type = special_contract level = scope:obligation_set.var:level }}
				flag:religious_rights = { vassal_contract_set_obligation_level = { type = religious_rights level = scope:obligation_set.var:level }}
				flag:fortification_rights = { vassal_contract_set_obligation_level = { type = fortification_rights level = scope:obligation_set.var:level }}
				flag:coinage_rights = { vassal_contract_set_obligation_level = { type = coinage_rights level = scope:obligation_set.var:level }}
				flag:succession_rights = { vassal_contract_set_obligation_level = { type = succession_rights level = scope:obligation_set.var:level }}
				flag:war_declaration_rights = { vassal_contract_set_obligation_level = { type = war_declaration_rights level = scope:obligation_set.var:level }}
				flag:council_rights = { vassal_contract_set_obligation_level = { type = council_rights level = scope:obligation_set.var:level }}
				flag:title_revocation_rights = { vassal_contract_set_obligation_level = { type = title_revocation_rights level = scope:obligation_set.var:level }}
			}
		}
	}
	end_story = yes
}

negotiations_end_negative = {
	var:vassal = { add_piety = 1000 }
	var:ruler = { add_piety = 1000 }
	end_story = yes
}

negotiations_end_negative_vassal_walks_out = {
	var:vassal = { add_prestige = 1000 }
	var:ruler = { add_piety = 1000 }
	end_story = yes
}

negotiations_end_negative_ruler_walks_out = {
	var:vassal = { add_piety = 1000 }
	var:ruler = { add_prestige = 1000 }
	end_story = yes
}