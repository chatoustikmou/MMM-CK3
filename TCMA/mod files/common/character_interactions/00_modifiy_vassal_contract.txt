liege_modify_vassal_contract_interaction = {
	special_interaction = modify_vassal_contract
	interface = modify_vassal_contract
	category = interaction_category_vassal
	common_interaction = yes

	send_name = "modify_vassal_contract_interaction_SEND"
	desc = liege_modify_vassal_contract_interaction_desc

	force_notification = yes
	notification_text = MODIFY_VASSAL_CONTRACT_NOTIFICATION_TO_VASSAL
	
	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
			exists = liege
			liege = scope:actor
			is_ruler = yes
			vassal_contract_has_modifiable_obligations = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = { 
			is_diplomatically_available = yes
		}
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
	}

	# can_send = {
	# 	trigger_if = { #If they're blocked we don't want to show anything else
	# 		limit = {
	# 			scope:recipient = {
	# 				vassal_contract_is_blocked_from_modification = yes
	# 			}
	# 		}
	# 		scope:recipient = {
	# 			vassal_contract_is_blocked_from_modification = no
	# 		}
	# 	}
	# 	trigger_else = {
	# 		# [TCMA]
	# 		scope:recipient = {
	# 			custom_description = {
	# 				text = "accepts_proposal"
	# 				subject = scope:recipient
	# 				vassal_contract_negotiation_acceptance = yes
	# 			}
	# 			custom_description = {
	# 				text = "not_already_in_negotiation"
	# 				OR = {
	# 					NOT = { has_variable = contract_negotiation }
	# 					var:contract_negotiation.var:vassal = scope:actor
	# 					var:contract_negotiation.var:vassal = scope:actor
	# 				}
	# 			}
	# 		}
	# 		scope:actor = {
	# 			custom_description = {
	# 				text = "not_already_in_negotiation"
	# 				OR = {
	# 					NOT = { has_variable = contract_negotiation }
	# 					has_variable = gui_contract_negotiation
	# 				}
	# 			}
	# 		}
	# 		# [/TCMA]
	# 	}
	# }

	can_send = {
		trigger_if = { #If you're blocked we don't want to show anything else
			limit = { scope:actor = { vassal_contract_is_blocked_from_modification = yes }}
			scope:actor = {	vassal_contract_is_blocked_from_modification = no }
		}
		# [TCMA]
		trigger_else_if = {
			limit = { scope:actor = { NOT = { has_variable = gui_contract_negotiation }}}
			scope:actor = { 
				custom_description = {
					text = "not_already_in_negotiation"
					has_variable = contract_negotiation
				}
			}
		}
		trigger_else_if = {
			limit = {
				scope:recipient = {
					NAND = {
						has_variable = contract_negotiation
						var:contract_negotiation = scope:actor.var:contract_negotiation
					}
				}
			}
			scope:recipient = { 
				custom_description = {
					text = "not_already_in_negotiation"
					has_variable = contract_negotiation
					var:contract_negotiation = scope:actor.var:contract_negotiation
				}
			}
		}
		trigger_else_if = {
			limit = { scope:recipient = { is_ai = no }}
			scope:actor = {
				var:contract_negotiation = {
					any_in_list = {
						variable = negotiated_obligations
						PREV = {
							is_target_in_variable_list = {
								name = agreed_upon_obligations
								target = PREV
							}
						}
						count = all
					}
				}
			}
		}
		trigger_else = {
			scope:actor = { 
				custom_description = {
					text = "accepts_proposal"
					subject = scope:recipient
					liege_contract_negotiation_acceptance > 0
				}
			}
		}
		# [/TCMA]
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = msg_vassal_contract_change
				title = modify_vassal_contract_interaction_notification
				right_icon = scope:recipient
				# Add tyranny for each level increased. Can spend one hook to avoid one level of tyranny hit.
				add_tyranny = vassal_obligation_increase_tyranny_gain
				if = {
					limit = { vassal_obligation_increase_tyranny_gain != 0 }
					stress_impact = {
						just = medium_stress_impact_gain
						generous = medium_stress_impact_gain
					}
				}
				if = {
					limit = {
						always = scope:hook
					}
					use_hook = scope:recipient
					add_achievement_flag_effect = { FLAG = achievement_fine_print_flag }
				}

				scope:recipient = {
					hidden_effect = { set_vassal_contract_modification_blocked = yes }
					
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_taxes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_levies }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = special_contract }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = religious_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = fortification_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = coinage_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = succession_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = war_declaration_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = council_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = title_revocation_rights }
				}
			}
		}
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
}

vassal_modify_vassal_contract_interaction = {
	special_interaction = modify_vassal_contract
	interface = modify_vassal_contract
	category = interaction_category_vassal
	common_interaction = yes

	send_name = "modify_vassal_contract_interaction_SEND"
	desc = vassal_modify_vassal_contract_interaction_desc

	force_notification = yes
	notification_text = MODIFY_VASSAL_CONTRACT_NOTIFICATION_TO_LIEGE

	is_shown = {
		scope:actor = {
			is_independent_ruler = no
			NOT = { this = scope:recipient }
			liege = scope:recipient
			vassal_contract_has_modifiable_obligations = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = { is_diplomatically_available = yes }
		NOT = { scope:actor = { is_at_war_with = scope:recipient } } 
	}

	can_send = {
		trigger_if = { #If you're blocked we don't want to show anything else
			limit = { scope:actor = { vassal_contract_is_blocked_from_modification = yes }}
			scope:actor = {	vassal_contract_is_blocked_from_modification = no }
		}
		# [TCMA]
		trigger_else_if = {
			limit = { scope:actor = { NOT = { has_variable = gui_contract_negotiation }}}
			scope:actor = { 
				custom_description = {
					text = "not_already_in_negotiation"
					has_variable = contract_negotiation
				}
			}
		}
		trigger_else_if = {
			limit = {
				scope:recipient = {
					NAND = {
						has_variable = contract_negotiation
						var:contract_negotiation = scope:actor.var:contract_negotiation
					}
				}
			}
			scope:recipient = { 
				custom_description = {
					text = "not_already_in_negotiation"
					has_variable = contract_negotiation
					var:contract_negotiation = scope:actor.var:contract_negotiation
				}
			}
		}
		trigger_else_if = {
			limit = { scope:recipient = { is_ai = no }}
			scope:actor = {
				var:contract_negotiation = {
					any_in_list = {
						variable = negotiated_obligations
						PREV = {
							is_target_in_variable_list = {
								name = agreed_upon_obligations
								target = PREV
							}
						}
						count = all
					}
				}
			}
		}
		trigger_else = {
			scope:actor = { 
				custom_description = {
					text = "accepts_proposal"
					subject = scope:recipient
					liege_contract_negotiation_acceptance > 0
				}
			}
		}
		# [/TCMA]
	}

	on_send = {
		start_feudal_contract_negotiation = { VASSAL = scope:actor INITIATOR = scope:actor }
	}

	auto_accept = yes

	on_accept = {
		if = {
			limit = { scope:recipient = { is_ai  = yes }}
			scope:actor = {
				send_interface_message = {
					type = msg_vassal_contract_change
					title = modify_vassal_contract_interaction_notification
					right_icon = scope:recipient
					if = {
						limit = { always = scope:hook }
						use_hook = scope:recipient
						add_achievement_flag_effect = { FLAG = achievement_fine_print_flag }
					}
					
					hidden_effect = { set_vassal_contract_modification_blocked = yes }

					set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_taxes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_levies }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = special_contract }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = religious_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = fortification_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = coinage_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = succession_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = war_declaration_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = council_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = title_revocation_rights }
				}
			}
		}
		else = {
			var:contract_negotiation = { negotiations_end_positive = yes }
		}
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	send_options_exclusive = no
}

ai_only_liege_modify_vassal_contract_interaction = {
	category = interaction_category_vassal
	send_name = "modify_vassal_contract_interaction_SEND"
	desc = liege_modify_vassal_contract_interaction_desc

	auto_accept = yes
	
	is_shown = {
		scope:actor = {
			is_ai = yes
			# has_usable_hook = scope:recipient
			NOT = { has_variable = contract_negotiation }
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			NOT = {
				# has_strong_hook = scope:actor
			}
			exists = liege
			liege = scope:actor
			is_ruler = yes
			vassal_contract_can_be_modified_trigger = yes
			does_ai_liege_in_vassal_contract_desire_obligation_change = yes
			NOT = { has_variable = contract_negotiation }
		}
		scope:recipient = { is_diplomatically_available = yes } 
		NOT = { scope:actor = { is_at_war_with = scope:recipient } } 
	}
		
	on_accept = {
		scope:actor = {
			stress_impact = {
				generous = minor_stress_impact_gain
			}
		}
		
		scope:recipient = {
			set_vassal_contract_modification_blocked = yes
			# trigger_event = char_interaction.0250
		}
		start_feudal_contract_negotiation = { VASSAL = scope:recipient INITIATOR = scope:actor }
	}

	ai_potential = {
		is_at_war = no
	}
	
	ai_targets = {
		ai_recipients = vassals
	}
	ai_frequency = 24
	
	ai_will_do = {
		base = 50
		
		modifier = {
			add = ai_energy
		}

		modifier = {
			factor = 0
			scope:recipient = {
				OR = {
					AND = {
						scope:actor = {
							ai_greed <= high_positive_ai_value
						}
						has_relation_friend = scope:actor
					}
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
	}
	
}

ai_only_vassal_modify_vassal_contract_interaction = {
	category = interaction_category_vassal
	send_name = "modify_vassal_contract_interaction_SEND"
	desc = vassal_modify_vassal_contract_interaction_desc

	auto_accept = yes
	
	is_shown = {
		scope:actor = {
			is_ai = yes
			is_independent_ruler = no
			# has_usable_hook = scope:recipient
			vassal_contract_can_be_modified_trigger = yes
			does_ai_vassal_in_vassal_contract_desire_obligation_change = yes
			NOT = { has_variable = contract_negotiation }
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_ruler = yes
			NOT = {
				# has_strong_hook = scope:actor
			}
			NOT = { has_variable = contract_negotiation }
		}
		scope:recipient = { is_diplomatically_available = yes }
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
	}
		
	on_accept = {
		scope:recipient = {
			# trigger_event = char_interaction.0251
		}
		start_feudal_contract_negotiation = { VASSAL = scope:actor INITIATOR = scope:actor }
	}

	ai_potential = {
		always = yes
	}
	
	ai_targets = {
		ai_recipients = liege
	}
	ai_frequency = 24
	
	ai_will_do = {
		base = 50
		
		modifier = {
			add = ai_energy
		}

		modifier = {
			factor = 0
			scope:recipient = {
				OR = {
					AND = {
						scope:actor = {
							ai_greed <= high_positive_ai_value
						}
						has_relation_friend = scope:actor
					}
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
	}
}
