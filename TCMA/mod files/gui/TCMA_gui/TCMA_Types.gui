types TCMA_contract_buttons {
	type TCMA_contract_tree_button = button_letter
	{

		block "Visible"
		{
		}	
		size = { 100 80 }

		text_single = {
			text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
			visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
			default_format = "#light_background"
			parentanchor = center
			position = {0 -3 }
		}

		text_single = {
			text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
			visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
			default_format = "#high"
			parentanchor = center
			position = {0 -3 }
		}

		tooltip = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetTooltip]"

		onclick = "[ModifyVassalContractInteractionWindowObligationLevelOption.Select]"
		block "OnClick"
		{
		}
		
		using = tooltip_above

		# background = {
		# 	using = Background_Area_Dark
		# 	visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
		# }

		icon = {
			parentanchor = top|hcenter
			position = { 0 -5 }
			texture = "gfx/interface/buttons/button_tree_expand.dds"
			framesize = { 36 36 }
			size = { 24 24 }
			frame = 2
			tintcolor = { 0.4 0.4 0.5 0.7 }
			visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsCurrent]"

			using = Mask_Rough_Edges
		}
	}

	type TCMA_contract_radio_button = button_radio_label
	{
		block "OnClick"
		{
		}
		
		onclick = "[ModifyVassalContractInteractionWindowObligationLevelOption.Select]"
		# enabled = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled]"

		blockoverride "radio" 
		{ 
			frame = "[BoolTo1And2( ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected )]"
		}
		blockoverride "text"
		{
			text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
			default_format = "#light_background"
		}

		tooltip = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetTooltip]"
	}

	type TCMA_contract_checkbox_button = button_checkbox_label
	{
		# Order dependent, first select the unselected level then set it as the new selected one
		onclick = "[ObligationLevelCheckbox.AccessLevel( ObligationLevelCheckbox.GetUnselectedLevelIndex ).Select]"
		onclick = "[ObligationLevelCheckbox.ToggleSelection]"
		block "OnClick"
		{
		}
			
		# blockoverride "checkbox"
		# {
		# 	checked = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
		# 	enabled = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled]" 
		# }
		
		blockoverride "text"
		{
			text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
			default_format = "#light_background"
		}
	}	
}

types TCMA_widget_vassal_list {
	type widget_vassal_list_item = widget {
		datacontext = "[CharacterListItem.GetCharacter]"
		size = { 200 180 }

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 10 5 }

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10

				background = {
					using = Background_Area
				}

				portrait_head_small = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_right = 10

					hbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							hbox = {
								layoutpolicy_horizontal = expanding
								minimumsize = { 0 30 }

								background = {
									using = Background_Area_Characterlist
									margin = { 8 0 }
									margin_left = 15

									using = Mask_Rough_Edges
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[Character.GetUINameNoTooltip]"
									using = Font_Size_Medium
									autoresize = no
									fontsize_min = 13
									align = nobaseline
								}
							}

							text_single = {
								name = "character_relation"
								visible = "[Character.GetLiege.IsLocalPlayer]"
								layoutpolicy_horizontal = expanding
								text = "[Character.GetRelationToString(GetPlayer)] "
								default_format = "#low"
								autoresize = no
								fontsize_min = 13
								align = nobaseline
							}
						}

						block "own_vassal" {
							vbox = {
								layoutpolicy_vertical = expanding
								margin_left = 10
								visible = "[Character.GetLiege.IsLocalPlayer]"

								hbox = {
									coa_title_tiny_crown = {
										name = "allegiance_flag"
										datacontext = "[VassalContract.GetTitleAllegiance]"
										visible = "[Title.IsValid]"
										tooltip = "MRW_TITLE_ALLEGIANCE"
										blockoverride "coa_tooltip" {}
									}

									vbox = {
										layoutpolicy_vertical = expanding
										margin_top = 5

										hbox = {

											icon = {
												name = "hook"
												visible = "[Character.PlayerHasHooksOrHookableSecrets]"
												size = { 25 25 }
												framesize = { 40 40 }
												texture = "gfx/interface/icons/portraits/hook_secret.dds"

												frame = "[Character.GetHookOrHookableSecretsFrame]"
												tooltip = "[Character.HookTooltip]"
											}

											icon = {
												name = "icon_non_dejure"
												visible = "[Not( VassalContract.IsRightfulLiege )]"
												size = { 30 30 }
												texture = "gfx/interface/icons/levy_tax_reduction.dds"

												using = tooltip_ws
												tooltip = "MRW_TT_NOT_RIGHTFUL_LIEGE"
											}
										}
										expand = {}
									}
								}
								expand = {}
							}
						}
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						text_single = {
							text = "REALM_WINDOW_SIZE"
							tooltip = "REALM_WINDOW_SIZE_TT"
							align = nobaseline
							visible = "[NotEqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)2')]" #nonbaron

						}

						hbox = {
							spacing = 3
							margin = { 5 0 }

							block "own_vassal"
							{
								visible = no
							}

							icon = {
								size = { 22 22 }
								texture = "gfx/interface/icons/icon_soldier.dds"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[Character.GetMilitaryStrengthText]"
								align = nobaseline
								default_format = "#high"
							}
						}

						text_single = {
							visible = "[Character.IsPowerfulVassal]"
							text = "MY_REALM_WINDOW_POWERFUL_VASSAL"
							layoutpolicy_horizontal = expanding
							align = nobaseline
							autoresize = no
						}

						expand = {}

						hbox_skills_grid = {}
					}

					expand = {}
				}
			}

			block "own_vassal"
			{
				block "feudal_contract"
				{
					vbox = {
						name = "feudal_info"
						layoutpolicy_horizontal = expanding
						margin = { 10 5 }
						spacing = 10

						background = {
							using = Background_Area
						}
						# [TCMA]
						widget_vassal_list_modify_contract_vassal_vanilla = {
							datacontext = "[GetScriptedGui('sgui_TCMA_active')]"
							visible = "[Not(ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"
						}
						widget_vassal_list_modify_contract_vassal_MMM = {
							datacontext = "[GetScriptedGui('sgui_TCMA_active')]"
							visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						}
						# [/TCMA]

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								icon = {
									size = { 25 25 }
									texture = "gfx/interface/icons/icon_gold.dds"
								}

								widget = {
									layoutpolicy_horizontal = expanding

									background = {
										using = Background_Area
										margin = { 3 2 }
									}

									progressbar_standard_transparent = {
										size = "[MyRealmWindowVassalItem.GetRelativeSizeForTax]"
										minimumsize = { 10 0 }
										value = "[FixedPointToProgressbarValue(VassalContract.GetTaxRatioForLiege)]"
									}

									flowcontainer = {
										parentanchor = center
										position = { 0 -2 }
										spacing = 4

										text_single = {
											text = "[MyRealmWindowVassalItem.GetCachedTax|=1]"
										}
									}
								}

								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindowVassalItem.GetTaxBreakdown]"
										blockoverride "levy_info_visible" { visible = no }
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_TAXES_TO_ME"
										}

										blockoverride "levy_info"
										{
											text_single = {
												multiline = yes
												maximumsize = { 250 -1 }
												text = "[MyRealmWindowVassalItem.GetLevyTooltip]"
											}
										}
									}
								}
								using = tooltip_ws
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 3

								icon = {
									size = { 25 25 }
									texture = "gfx/interface/icons/icon_soldier.dds"
								}

								widget = {
									layoutpolicy_horizontal = expanding
									#	size = { 150 22 }

									background = {
										using = Background_Area
										margin = { 3 2 }
									}

									progressbar_standard_transparent = {
										size = "[MyRealmWindowVassalItem.GetRelativeSizeForLevies]"
										minimumsize = { 10 0 }
										value = "[FixedPointToProgressbarValue(VassalContract.GetLevyRatioForLiege)]"
									}

									flowcontainer = {
										parentanchor = center
										position = { 0 -2 }
										spacing = 4

										text_single = {
											text =  "[MyRealmWindowVassalItem.GetCachedLeviesFormatted]"
										}
									}
								}

								tooltipwidget = {
									my_realm_window_contribution_tooltip = {
										datacontext = "[MyRealmWindowVassalItem.GetLeviesBreakdown]"
										blockoverride "tax_info_visible" { visible = no }
										blockoverride "contribution_tooltip_header"
										{
											text = "MRW_TT_LEVIES_TO_ME"
										}
										blockoverride "tax_info"
										{
											text_single = {
												multiline = yes
												maximumsize = { 250 -1 }
												text = "[MyRealmWindowVassalItem.GetTaxTooltip]"
											}
										}
									}
								}
								using = tooltip_ws
							}
						}
						expand = {}
					}
				}
			}

			expand = {}
		}
	}

	type vbox_interaction_options = vbox {
		name = "options_grid"
		visible = "[CharacterInteractionConfirmationWindow.HasOptions]"
		datamodel = "[CharacterInteractionConfirmationWindow.GetOptionItems]"
		spacing = 4

		block "margin"
		{
			margin = { 0 10 }
		}

		text_label_center = {
			visible = "[Not( StringIsEmpty(CharacterInteractionConfirmationWindow.GetOptionsHeading) )]"
			layoutpolicy_horizontal = expanding
			text = "[CharacterInteractionConfirmationWindow.GetOptionsHeading]"
			align = center|nobaseline
		}

		item = {
			widget = {
				visible = "[OptionItem.IsShown]"
				layoutpolicy_horizontal = expanding
				size = { 480 40 }

				background = {
					using = Background_Area_Border
				}

				hbox = {
					visible = "[Or( GreaterThan_int32( CharacterInteractionConfirmationWindow.GetVisibleOptionsCount, '(int32)1' ), Not( CharacterInteractionConfirmationWindow.HasExclusiveOptions ) )]"
					margin = { 16 0 }
					spacing = 8
					tooltip = "[OptionItem.GetTooltip]"

					button_checkbox = {
						size = { 30 30 }
						checked = "[OptionItem.HasOption]"
						onclick = "[OptionItem.OnClick]"
						block OnClick
						{
						}
						visible = "[Not(OptionItem.IsExclusive)]"
						enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
					}

					button_radio = {
						size = { 30 30 }
						frame = "[BoolTo1And2( OptionItem.HasOption )]"
						onclick = "[OptionItem.OnClick]"
						block OnClick
						{
						}
						visible = "[OptionItem.IsExclusive]"
						enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[OptionItem.GetName]"
						align = nobaseline
					}
				}

				hbox = {
					margin = { 10 0 }
					spacing = 5
					tooltip = "[OptionItem.GetTooltip]"
					visible = "[And( CharacterInteractionConfirmationWindow.HasExclusiveOptions, EqualTo_int32( CharacterInteractionConfirmationWindow.GetVisibleOptionsCount, '(int32)1' ) )]"

					text_single = {
						text = "[OptionItem.GetName]"
					}
				}
			}
		}
	}

	type widget_vassal_list_modify_contract_vassal_MMM = hbox {
		layoutpolicy_horizontal = expanding
		hbox = {
			layoutpolicy_horizontal = expanding
			visible = "[And( VassalContract.UsesObligationLevels, Not( Character.GetPrimaryTitle.IsBarony))]"
			spacing = 10

			widget_vassal_list_modify_contract_vassal_button_vanilla = {
				datacontext = "[GetScriptedGui('sgui_TCMA_active')]"
				visible = "[Not(ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"
			}
			widget_vassal_list_modify_contract_vassal_button_TCMA = {
				datacontext = "[GetScriptedGui('sgui_TCMA_active')]"
				visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "MY_REALM_WINDOW_VASSAL_OBLIGATION"
				default_format = "#low"
				align = nobaseline
			}

			expand = {}

			vassal_contract_not_default_icon = {}

			widget_vassal_list_modify_contract_vassal_submission_StA = {
				datacontext = "[GetScriptedGui('sgui_StA_active')]"
				visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
			}
		}
		hbox = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(And( VassalContract.UsesObligationLevels, Not( Character.GetPrimaryTitle.IsBarony)))]"
			spacing = 5

			icon = {
				size = { 42 42 }
				texture = "gfx/interface/icons/symbols/icon_cross.dds"
				tooltip = MY_REALM_WINDOW_NO_FEUDAL_CONTRACT_TT
				enabled = no
			}

			text_single = {
				text = "[Character.GetGovernment.GetName]"
				align = nobaseline
			}

			expand = {}
		}
		expand = {}
	}

	type widget_vassal_list_modify_contract_vassal_button_TCMA = hbox {
		button_round = {
			visible = "[Character.IsPlayerInteractionShown('liege_modify_vassal_contract_interaction_PvAI')]"
			enabled = "[Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction_PvAI')]"
			onclick = "[Character.OpenPlayerInteraction('liege_modify_vassal_contract_interaction_PvAI')]"
			tooltip = "[Character.GetPlayerInteractionTooltip('liege_modify_vassal_contract_interaction')]"

			button_feudal_contract = {
				alwaystransparent = yes
				parentanchor = center
			}
		}

		button_round = {
			visible = "[Character.IsPlayerInteractionShown('liege_modify_vassal_contract_interaction_PvP')]"
			enabled = "[Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction_PvP')]"
			onclick = "[Character.OpenPlayerInteraction('liege_modify_vassal_contract_interaction_PvP')]"
			tooltip = "[Character.GetPlayerInteractionTooltip('liege_modify_vassal_contract_interaction')]"

			button_feudal_contract = {
				alwaystransparent = yes
				parentanchor = center
			}
		}
	}
}

types TCMA_window_my_realm {
	type window_my_realm_modify_contract_liege_TCMA = vbox {
		hbox = {
			name = "vassal_contract"
			datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
			datacontext = "[MyRealmWindow.GetCharacter.GetVassalContract]"
			margin_left = 3
			spacing = 10
		
			button_replace = {
				visible = "[Not(GetPlayer.GetLiege.IsOtherPlayer)]"
				enabled = "[Character.IsPlayerInteractionValid('vassal_modify_vassal_contract_interaction_PvAI')]"
				onclick = "[Character.OpenPlayerInteraction('vassal_modify_vassal_contract_interaction_PvAI')]"
				tooltip = "[Character.GetPlayerInteractionTooltip('vassal_modify_vassal_contract_interaction_PvAI')]"
			}
			button_replace = {
				visible = "[GetPlayer.GetLiege.IsOtherPlayer]"
				enabled = "[Character.IsPlayerInteractionValid('vassal_modify_vassal_contract_interaction_PvP')]"
				onclick = "[Character.OpenPlayerInteraction('vassal_modify_vassal_contract_interaction_PvP')]"
				tooltip = "[Character.GetPlayerInteractionTooltip('vassal_modify_vassal_contract_interaction_PvP')]"
			}
			
			text_single = {
				visible = "[VassalContract.UsesObligationLevels]"
				layoutpolicy_horizontal = expanding
				align = center
				text = "MY_REALM_WINDOW_MY_OBLIGATIONS"
			}

			vassal_contract_not_default_icon = {}
		}
	}
}

types TCMA_vanilla_override {
	type vbox_interaction_options_TCMA = vbox {
		name = "options_grid"
		visible = "[CharacterInteractionConfirmationWindow.HasOptions]"
		datamodel = "[CharacterInteractionConfirmationWindow.GetOptionItems]"
		spacing = 4

		block "margin"
		{
			margin = { 0 10 }
		}

		text_label_center = {
			visible = "[Not( StringIsEmpty(CharacterInteractionConfirmationWindow.GetOptionsHeading) )]"
			layoutpolicy_horizontal = expanding
			text = "[CharacterInteractionConfirmationWindow.GetOptionsHeading]"
			align = center|nobaseline
		}

		item = {
			widget = {
				visible = "[OptionItem.IsShown]"
				layoutpolicy_horizontal = expanding
				size = { 480 40 }

				background = {
					using = Background_Area_Border
				}

				hbox = {
					visible = "[Or( GreaterThan_int32( CharacterInteractionConfirmationWindow.GetVisibleOptionsCount, '(int32)1' ), Not( CharacterInteractionConfirmationWindow.HasExclusiveOptions ) )]"
					margin = { 16 0 }
					spacing = 8
					tooltip = "[OptionItem.GetTooltip]"

					button_checkbox = {
						size = { 30 30 }
						checked = "[OptionItem.HasOption]"
						onclick = "[OptionItem.OnClick]"
						visible = "[Not(OptionItem.IsExclusive)]"
						enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
						block checkbox_onclick
						{
						}
					}

					button_radio = {
						size = { 30 30 }
						frame = "[BoolTo1And2( OptionItem.HasOption )]"
						onclick = "[OptionItem.OnClick]"
						visible = "[OptionItem.IsExclusive]"
						enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[OptionItem.GetName]"
						align = nobaseline
					}
				}

				hbox = {
					margin = { 10 0 }
					spacing = 5
					tooltip = "[OptionItem.GetTooltip]"
					visible = "[And( CharacterInteractionConfirmationWindow.HasExclusiveOptions, EqualTo_int32( CharacterInteractionConfirmationWindow.GetVisibleOptionsCount, '(int32)1' ) )]"

					text_single = {
						text = "[OptionItem.GetName]"
					}
				}
			}
		}
	}
}