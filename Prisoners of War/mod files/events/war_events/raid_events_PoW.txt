namespace = raiding

scripted_trigger raiding_0012_can_be_captured = {
	# Captured characters must be located in the raided barony itself.
	location = scope:barony.title_province

	# Reasons to exclude characters from the capture pool:
	NOR = {
		# If the raiders have defeated the holder's army, but the army has not yet retreated to a different province, shield them from capture by the raid.
		exists = commanding_army
		exists = knight_army

		# Is imprisoned in the barony stay prisoners (special case, any courtiers/vassals of the raider will get released elsewhere).
		is_imprisoned = yes
	}
}

# Chance to kidnap prisoners from the holding holder.
raiding.0013 = {
	hidden = yes
	scope = army

	trigger = { # Only take prisoners if this barony is the holder's capital (where their family/courtiers live).
		scope:barony.holder.capital_barony = scope:barony
	}

	immediate = {

		# [PoW]
		# For use in prisoner_of_war_capture_effect
		debug_log = "dbg_log Raiding"
		debug_log_scopes = no
		save_scope_as = PoW_army
		# [/PoW]

		# For localization.
		scope:raider = { save_scope_as = occupant }	
		scope:barony.holder = { save_scope_as = holder}

		#BUILD CAPTURE ATTEMPT LIST
		scope:barony.holder = {
			if = {
				limit = { raiding_0012_can_be_captured = yes }
				add_to_list = capture_attempt_targets
			}
			every_courtier_or_guest = {
				limit = { raiding_0012_can_be_captured = yes }
				add_to_list = capture_attempt_targets
			}
		}

		#CALCULATE CAPTURE CHANCE
		every_in_list = {
			list = capture_attempt_targets
			random = {	
				# Base chance handled in a modifier due to the chance parameter tending to quietly fail to parse scripted values.
				chance = 0

				# Base chance starts at 20%, before value modifiers & target modifiers.
				modifier = { add = raid_base_capture_chance }

				# Add -0.5 chance per 1pt of Intrigue, averaging out at -5% chance for 10pts of Intrigue.
				modifier = {
					add = {
						value = this.intrigue
						multiply = -0.5
						min = -10
					}
					# Requiring a certain base level to be at all effective.
					intrigue > low_skill_rating
				}
				# Add -0.5 chance per 1pt of Prowess, averaging out at -5% chance for 10pts of Prowess.
				modifier = {
					add = {
						value = this.prowess
						multiply = -0.5
						min = -10
					}
					# Requiring a certain base level to be at all effective.
					prowess > low_skill_rating
				}
				# Less likely to capture the ruler themselves in a raid
				modifier = {
					is_landed = yes
					add = -10
				}

				# Capture Effects
				if = {
					limit = { desirable_for_capture_trigger = yes }
					add_to_list = captured_targets_effects
				}
				else = { add_to_list = killed_targets }
			}
		}

		#IMPRISON & KILL EFFECTS
		every_in_list = {
			list = captured_targets_effects

			hidden_effect = {
				add_character_flag = {
					flag = block_imprisonment_event
					days = 1
				}
			}

			prisoner_of_war_capture_effect = {
				TARGET = this
				IMPRISONER = scope:raider
				LOCATION = scope:barony.title_province
			}
		}
		every_in_list = {
			list = killed_targets

			death = {
				death_reason = death_raid
			}
		}

		#NOTIFY CONCERNED PARTIES
		#Inform about captures.
		if = {
			limit = {
				any_in_list = {
					list = captured_targets_effects
					count >= 1
				}
			}
			#Inform raider.
			scope:raider = {
				trigger_event = siege.0002
			}
			#Inform affected holder about captures.
			scope:barony.holder = {
				if = {
					limit = {
						save_temporary_scope_as = notification_target
						any_in_list = {
							list = captured_targets_effects
							NOT = { this = scope:notification_target}
						}
					}
					trigger_event = siege.0003
				}
			}
			#Inform concerned players about captures.
			every_player = {
				limit = {
					NOR = {
						this = scope:raider
						this = scope:barony.holder
					}
					save_temporary_scope_as = notification_target
					any_in_list = {
						list = captured_targets_effects
						has_any_relation_trigger = { CHARACTER = scope:notification_target }
					}
				}
				trigger_event = siege.0004
			}
		}
		#Inform about kills.
		if = {
			limit = {
				any_in_list = {
					list = killed_targets
					count >= 1
				}
			}
			# Inform affected holder about kills.
			scope:barony.holder = {
				trigger_event = siege.0013
			}
			#Inform concerned players about kills.
			every_player = {
				limit = {
					NOR = {
						this = scope:raider
						this = scope:barony.holder
					}
					save_temporary_scope_as = notification_target
					any_in_list = {
						list = killed_targets
						has_any_relation_trigger = { CHARACTER = scope:notification_target }
					}
				}
				trigger_event = siege.0014
			}
		}
	}
}